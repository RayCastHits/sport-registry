# Generated by Django 3.0.5 on 2020-05-18 20:22

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Наименование разряда')),
                ('rank', models.PositiveIntegerField(verbose_name='Разряд')),
            ],
            options={
                'verbose_name': 'Разряд',
                'verbose_name_plural': 'Разряд',
                'ordering': ('name', 'rank'),
            },
        ),
        migrations.CreateModel(
            name='SportType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Вид спорта',
                'verbose_name_plural': 'Виды спорта',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Sportsman',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Имя')),
                ('surname', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=150, null=True, verbose_name='Отчество')),
                ('date_of_birth', models.DateField(verbose_name='Дата рождения')),
                ('gender', models.BooleanField(choices=[(False, 'Мужской'), (True, 'Женский')], max_length=10, verbose_name='Пол')),
                ('location', models.CharField(blank=True, max_length=150, null=True, verbose_name='Место жительства')),
                ('phone_number', models.CharField(blank=True, max_length=12, null=True, verbose_name='Контактный номер')),
                ('sports_facility', models.CharField(blank=True, max_length=250, null=True, verbose_name='Спортивное учреждение')),
                ('is_swimming', models.BooleanField(blank=True, choices=[(False, 'нет'), (True, 'есть')], null=True, verbose_name='Умение плавать')),
                ('school_progress', models.IntegerField(choices=[(0, 'Отлично'), (1, 'Хорошо'), (2, 'Удовлетворительно')], verbose_name='Успеваемость в школе')),
                ('is_desire', models.BooleanField(blank=True, verbose_name='Желание заниматься спортом')),
                ('rank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='registry.Rank', verbose_name='Разряд')),
                ('sport_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='registry.SportType', verbose_name='Вид спорта')),
            ],
            options={
                'verbose_name': 'Спортсмен',
                'verbose_name_plural': 'Спортсмены',
                'ordering': ('surname',),
            },
        ),
        migrations.CreateModel(
            name='Primary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Дата обследования')),
                ('stage', models.IntegerField(blank=True, choices=[(0, '1 этап'), (1, '2 этап'), (2, '3 этап')], null=True, verbose_name='Этап')),
                ('weight', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Вес тела (кг)')),
                ('length', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Длина тела(см)')),
                ('spit_leg_length', models.PositiveIntegerField(blank=True, null=True, verbose_name='Длина ног от вертела(см)')),
                ('foot_length', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Длина стопы (см)')),
                ('torso_length_7', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Длина туловища от 7-го шейного позвонка(см)')),
                ('arm_span', models.PositiveIntegerField(blank=True, null=True, verbose_name='Размах рук(см)')),
                ('chest_girth_inspiration', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Обхват грудной клетки на вдохе(см)')),
                ('exhaling_chest', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Обхват грудной клетки на выдохе(см)')),
                ('excursion_difference', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Экскурсия(разница)')),
                ('spirometry', models.PositiveIntegerField(blank=True, null=True, verbose_name='Спирометрия(ЖЕЛ)мл')),
                ('breath_hold_stange', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Проба с задер.дых.на вдохе(проба Штанге)сек')),
                ('dynamometry', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Становая динамометрия')),
                ('dynamometry_right', models.PositiveIntegerField(blank=True, null=True, verbose_name='Динамометрия правой кисти(кг)')),
                ('dynamometry_left', models.PositiveIntegerField(blank=True, null=True, verbose_name='Динамометрия левой кисти(кг)')),
                ('fat_mass', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='% жировой массы')),
                ('muscle_mass', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='% мышечной массы')),
                ('open_eyes', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Открытые глаза (фон)')),
                ('close_eyes', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Закрытые глаза')),
                ('target', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Мишень')),
                ('pwc_kg', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='PWC Кг мм')),
                ('pwc', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='PWC ЧСС')),
                ('pressure_up', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Артериальное давление(верхнее)')),
                ('pressure_down', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Артериальное давление(нижнее)')),
                ('oxygen', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Максимальное потребление кислорода')),
                ('diseases', models.CharField(blank=True, max_length=250, null=True, verbose_name='Перенесенные заболевания(травмы)')),
                ('type_body_father', models.IntegerField(blank=True, choices=[(0, 'Эктоморф'), (1, 'Эндоморф'), (2, 'Мезоморф')], null=True, verbose_name='Тип тела отца')),
                ('type_body_mother', models.IntegerField(blank=True, choices=[(0, 'Эктоморф'), (1, 'Эндоморф'), (2, 'Мезоморф')], null=True, verbose_name='Тип тела матери')),
                ('front_type', models.IntegerField(blank=True, choices=[(0, 'Уплощенная'), (1, 'Цилиндрическая'), (2, 'Коническая'), (3, 'Нормальная')], null=True, verbose_name='Форма грудной клетки')),
                ('back_type', models.IntegerField(blank=True, choices=[(0, 'Нормальная'), (1, 'Плоская'), (2, 'Плоско-выгнутая'), (3, 'Сутуловатость'), (4, 'Круглая'), (5, 'Кругло-вогнутая')], null=True, verbose_name='Форма спины')),
                ('past_diseases', models.CharField(blank=True, max_length=250, null=True, verbose_name='Перенесенные заболевания(травмы)')),
                ('height_father', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Рост отца')),
                ('weight_father', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Вес отца')),
                ('body_type_father', models.IntegerField(blank=True, choices=[(0, 'Эктоморф'), (1, 'Эндоморф'), (2, 'Мезоморф')], null=True, verbose_name='Тип тела отца')),
                ('height_mother', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Рост матери')),
                ('weight_mother', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Вес матери')),
                ('body_type_mother', models.IntegerField(blank=True, choices=[(0, 'Эктоморф'), (1, 'Эндоморф'), (2, 'Мезоморф')], null=True, verbose_name='Тип тела матери')),
                ('chest_shape', models.IntegerField(blank=True, choices=[(0, 'Уплощенная'), (1, 'Цилиндрическая'), (2, 'Коническая'), (3, 'Нормальная')], null=True, verbose_name='Форма грудной клетки')),
                ('back_shape', models.IntegerField(blank=True, choices=[(0, 'Нормальная'), (1, 'Плоская'), (2, 'Плоско-выгнутая'), (3, 'Сутуловатость'), (4, 'Круглая'), (5, 'Кругло-вогнутая')], null=True, verbose_name='Форма спины')),
                ('speed', models.PositiveIntegerField(blank=True, null=True, verbose_name='Быстрота')),
                ('strength', models.PositiveIntegerField(blank=True, null=True, verbose_name='Сила%')),
                ('stamina', models.PositiveIntegerField(blank=True, null=True, verbose_name='Выносливость%')),
                ('coordination', models.PositiveIntegerField(blank=True, null=True, verbose_name='Координация%')),
                ('nervous_system_potential', models.IntegerField(blank=True, choices=[(0, 'Слабая'), (1, 'Средне-слабая'), (2, 'Средняя'), (3, 'Средне-сильная'), (4, 'Сильная')], default='Средняя', null=True, verbose_name='Потенциал нервной системы')),
                ('run_30', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Бег 30м')),
                ('jump_place', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Прыжок в длину с места')),
                ('pull_ups', models.PositiveIntegerField(blank=True, null=True, verbose_name='Подтягивания на перекладине')),
                ('concept', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Концепт(техническая гребля)')),
                ('run_1500', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Бег 1500м')),
                ('concept_500', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Концепт 500м')),
                ('motivation', models.IntegerField(blank=True, choices=[(0, 'Низкая'), (1, 'Средняя'), (2, 'Высокая')], null=True, verbose_name='Мотивация к тренеровочному процессу')),
                ('willed_qualities', models.IntegerField(blank=True, choices=[(0, 'Не развитый'), (1, 'Низкий'), (2, 'Высокий')], null=True, verbose_name='Развитие волевых качеств')),
                ('sportsman', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Sportsman', verbose_name='Спортсмен')),
            ],
            options={
                'verbose_name': 'Первичное',
                'verbose_name_plural': 'Первичные',
                'ordering': ('date',),
            },
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Имя')),
                ('surname', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=150, null=True, verbose_name='Отчество')),
                ('telephone', models.CharField(blank=True, max_length=12, null=True, verbose_name='Контактный номер')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Электронная почта')),
                ('child', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='registry.Sportsman')),
            ],
            options={
                'verbose_name': 'Представитель',
                'verbose_name_plural': 'Представители',
                'ordering': ('surname',),
            },
        ),
        migrations.CreateModel(
            name='Medical',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Дата обследования')),
                ('stage', models.IntegerField(blank=True, choices=[(0, '1 этап'), (1, '2 этап'), (2, '3 этап')], null=True, verbose_name='Этап')),
                ('weight', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Вес тела (кг)')),
                ('length', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Длина тела(см)')),
                ('spit_leg_length', models.PositiveIntegerField(blank=True, null=True, verbose_name='Длина ног от вертела(см)')),
                ('foot_length', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Длина стопы (см)')),
                ('torso_length_7', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Длина туловища от 7-го шейного позвонка(см)')),
                ('arm_span', models.PositiveIntegerField(blank=True, null=True, verbose_name='Размах рук(см)')),
                ('chest_girth_inspiration', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Обхват грудной клетки на вдохе(см)')),
                ('exhaling_chest', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Обхват грудной клетки на выдохе(см)')),
                ('excursion_difference', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Экскурсия(разница)')),
                ('spirometry', models.PositiveIntegerField(blank=True, null=True, verbose_name='Спирометрия(ЖЕЛ)мл')),
                ('breath_hold_stange', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Проба с задер.дых.на вдохе(проба Штанге)сек')),
                ('dynamometry', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Становая динамометрия')),
                ('dynamometry_right', models.PositiveIntegerField(blank=True, null=True, verbose_name='Динамометрия правой кисти(кг)')),
                ('dynamometry_left', models.PositiveIntegerField(blank=True, null=True, verbose_name='Динамометрия левой кисти(кг)')),
                ('fat_mass', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='% жировой массы')),
                ('muscle_mass', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='% мышечной массы')),
                ('open_eyes', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Открытые глаза (фон)')),
                ('close_eyes', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Закрытые глаза')),
                ('target', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Мишень')),
                ('pwc_kg', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='PWC Кг мм')),
                ('pwc', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='PWC ЧСС')),
                ('pressure_up', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Артериальное давление(верхнее)')),
                ('pressure_down', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Артериальное давление(нижнее)')),
                ('oxygen', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Максимальное потребление кислорода')),
                ('ecg', models.PositiveIntegerField(blank=True, null=True, verbose_name='ЭКГ в покое')),
                ('ecg_load', models.PositiveIntegerField(blank=True, null=True, verbose_name='ЭКГ с нагрузкой')),
                ('heart', models.PositiveIntegerField(blank=True, null=True, verbose_name='Узи сердца')),
                ('plantometry', models.PositiveIntegerField(blank=True, null=True, verbose_name='Плантометрия')),
                ('cns_functional', models.PositiveIntegerField(blank=True, null=True, verbose_name='Фукц.возможности ЦНС')),
                ('cns_level', models.PositiveIntegerField(blank=True, null=True, verbose_name='Уров.работоспособности ЦНС')),
                ('grv', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='ГРВ')),
                ('golden_ratio', models.PositiveIntegerField(blank=True, null=True, verbose_name='Золотое сечение(0,16-0,62)')),
                ('voltage_index', models.PositiveIntegerField(blank=True, null=True, verbose_name='Индекс напряжения')),
                ('spectral_analysis', models.PositiveIntegerField(blank=True, null=True, verbose_name='Спектральный анализ')),
                ('integral_indicator', models.PositiveIntegerField(blank=True, null=True, verbose_name='Интегральный показатель')),
                ('adaptive_capabilities', models.PositiveIntegerField(blank=True, null=True, verbose_name='Адаптационные возм.организма')),
                ('functional_reserves', models.PositiveIntegerField(blank=True, null=True, verbose_name='Функциональные резервы')),
                ('sportsman', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Sportsman', verbose_name='Спортсмен')),
            ],
            options={
                'verbose_name': 'УМО',
                'verbose_name_plural': 'УМО',
                'ordering': ('date',),
            },
        ),
    ]
